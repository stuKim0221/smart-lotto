package app.grapekim.smartlotto.data.local.room.entity;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

@Entity(tableName = "generated_picks")
public class GeneratedPickEntity {
    @PrimaryKey(autoGenerate = true)
    public long id;

    /** "1,7,15,23,34,41" */
    public String numbersCsv;

    /** 저장 시각 (epoch millis) */
    public long createdAt;

    /** 즐겨찾기 여부 */
    public boolean favorite;

    /** 생성 방식: "AUTO" | "MANUAL" | "QR" (확장됨) */
    public String method;

    /** 표시용 제목(예: "[AUTO] 합계 160", "[QR-A] 제1184회") */
    public String title;

    // ==================== 결과 확인 기능 ====================

    /** 결과 확인 완료 여부 */
    @ColumnInfo(name = "result_checked", defaultValue = "0")
    public boolean resultChecked = false;

    /** 등수 (0=미확인, 1~5=등수, -1=낙첨) */
    @ColumnInfo(name = "result_rank", defaultValue = "0")
    public int resultRank = 0;

    /** 맞춘 번호 개수 */
    @ColumnInfo(name = "result_match_count", defaultValue = "0")
    public int resultMatchCount = 0;

    /** 해당 로또 회차 번호 */
    @ColumnInfo(name = "target_round")
    public Integer targetRound;

    // ==================== QR 다중 게임 지원 (신규) ====================

    /** QR 그룹 ID (같은 QR에서 나온 게임들을 묶음, null=단일 게임) */
    @ColumnInfo(name = "qr_group_id")
    public String qrGroupId;

    /** 게임 라벨 (A, B, C, D, E 또는 null=단일 게임) */
    @ColumnInfo(name = "game_label")
    public String gameLabel;

    /** QR 원본 데이터 (선택사항, 디버깅용) */
    @ColumnInfo(name = "qr_raw_data")
    public String qrRawData;

    /** QR에서 파싱된 구매시간 (createdAt과 다를 수 있음) */
    @ColumnInfo(name = "purchase_time")
    public Long purchaseTime;

    /** QR에서 파싱된 회차 정보 (targetRound와 중복이지만 파싱된 원본값) */
    @ColumnInfo(name = "parsed_round")
    public Integer parsedRound;

    /** 데이터 소스 타입 ("GENERATED", "MANUAL", "QR_STRUCTURED", "QR_TEXT") */
    @ColumnInfo(name = "source_type", defaultValue = "GENERATED")
    public String sourceType = "GENERATED";

    // ==================== 편의 메서드들 ====================

    /**
     * QR 다중 게임인지 확인
     */
    public boolean isQrMultiGame() {
        return qrGroupId != null && gameLabel != null;
    }

    /**
     * QR 게임인지 확인 (단일/다중 무관)
     */
    public boolean isQrGame() {
        return "QR".equals(method) || (sourceType != null && sourceType.startsWith("QR_"));
    }

    /**
     * 자동 생성 게임인지 확인
     */
    public boolean isAutoGenerated() {
        return "AUTO".equals(method) || "GENERATED".equals(sourceType);
    }

    /**
     * 수동 입력 게임인지 확인
     */
    public boolean isManualPick() {
        return "MANUAL".equals(method);
    }

    /**
     * 게임 표시용 제목 생성 (QR 게임용)
     */
    public static String createQrTitle(String gameLabel, Integer round, int gameCount) {
        if (gameCount > 1) {
            // 다중 게임: "[QR-A] 제1184회"
            return String.format("[QR-%s] %s",
                    gameLabel,
                    round != null ? ("제" + round + "회") : "회차 미상"
            );
        } else {
            // 단일 게임: "[QR] 제1184회"
            return String.format("[QR] %s",
                    round != null ? ("제" + round + "회") : "회차 미상"
            );
        }
    }

    /**
     * QR 그룹 ID 생성 (타임스탬프 기반)
     */
    public static String generateQrGroupId() {
        return "QR_" + System.currentTimeMillis();
    }

    /**
     * toString() 디버깅용
     */
    @Override
    public String toString() {
        return String.format("GeneratedPickEntity{id=%d, method='%s', title='%s', qrGroupId='%s', gameLabel='%s'}",
                id, method, title, qrGroupId, gameLabel);
    }
}